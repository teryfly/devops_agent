Here is the **step-by-step implementation** of the Python library `code_project_reader` that fulfills the requirements.

---

### Step 1: File: `code_project_reader/__init__.py`

```python
# Empty to mark as a package
```

---

### Step 2: File: `code_project_reader/utils.py`

```python
import os

TEXT_FILE_EXTENSIONS = {
    ".py", ".txt", ".md", ".json", ".yaml", ".yml", ".xml", ".html", ".css", ".js", ".csv"
}
TEXT_FILE_NAMES = {"Dockerfile", "Makefile", ".gitignore", "README", "README.md"}

def is_text_file(file_path):
    _, ext = os.path.splitext(file_path)
    filename = os.path.basename(file_path)
    return ext in TEXT_FILE_EXTENSIONS or filename in TEXT_FILE_NAMES

def safe_read_file(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return f.read()
    except (UnicodeDecodeError, PermissionError, IsADirectoryError):
        return None
```

---

### Step 3: File: `code_project_reader/tree_builder.py`

```python
import os

def build_tree(path, prefix=""):
    entries = []
    try:
        entries = sorted(
            [e for e in os.listdir(path) if not e.startswith(".") or e in (".gitignore",)],
            key=lambda x: (not os.path.isdir(os.path.join(path, x)), x.lower())
        )
    except PermissionError:
        return []

    lines = []
    for idx, entry in enumerate(entries):
        full_path = os.path.join(path, entry)
        connector = "└── " if idx == len(entries) - 1 else "├── "
        lines.append(prefix + connector + entry)

        if os.path.isdir(full_path):
            extension = "    " if idx == len(entries) - 1 else "│   "
            lines.extend(build_tree(full_path, prefix + extension))

    return lines
```

---

### Step 4: File: `code_project_reader/reader.py`

```python
import os
from code_project_reader.utils import is_text_file, safe_read_file
from code_project_reader.tree_builder import build_tree

def generate_project_document(root_path: str) -> str:
    if not os.path.isdir(root_path):
        raise ValueError(f"Invalid directory: {root_path}")

    project_name = os.path.basename(os.path.abspath(root_path))

    # Project Structure
    tree_lines = [project_name + "/"] + build_tree(root_path)
    tree_structure = "\n".join(tree_lines)

    # File Contents
    file_contents = []
    for dirpath, _, filenames in os.walk(root_path):
        for filename in filenames:
            full_path = os.path.join(dirpath, filename)
            if not is_text_file(full_path):
                continue

            rel_path = os.path.relpath(full_path, root_path)
            content = safe_read_file(full_path)
            if content is None:
                continue

            file_contents.append(
                f"File 1: {rel_path}\n---\n{content}\n---"
            )

    return (
        f"Project Name: {project_name}\n\n"
        f"Project Structure:\n{tree_structure}\n\n"
        f"File Contents:\n\n" + "\n\n".join(file_contents)
    )
```

---

### Step 5: Example Usage Script: `code_project_reader/main.py` (for testing)

```python
from code_project_reader.reader import generate_project_document

if __name__ == "__main__":
    import sys
    if len(sys.argv) != 2:
        print("Usage: python main.py <project_root_path>")
        sys.exit(1)

    root = sys.argv[1]
    document = generate_project_document(root)
    print(document)
```

---

This structure cleanly separates concerns and ensures that the output format strictly matches the required format for AI consumption. Let me know when you're ready to proceed with generating the DevOps command for file creation.
