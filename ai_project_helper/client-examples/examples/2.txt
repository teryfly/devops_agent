
Step 1: Add GitHub repository handling to utils.py
Complete code:

```python
import os
from git import Repo
import tempfile
import shutil
import re

TEXT_FILE_EXTENSIONS = {
    ".py", ".txt", ".md", ".json", ".yaml", ".yml", ".xml", ".html", ".css", ".js", ".csv"
}
TEXT_FILE_NAMES = {"Dockerfile", "Makefile", ".gitignore", "README", "README.md"}

def is_text_file(file_path):
    _, ext = os.path.splitext(file_path)
    filename = os.path.basename(file_path)
    return ext in TEXT_FILE_EXTENSIONS or filename in TEXT_FILE_NAMES

def safe_read_file(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return f.read()
    except (UnicodeDecodeError, PermissionError, IsADirectoryError):
        return None

def clone_github_repository(github_url: str) -> str:
    # Extract repo name from URL
    match = re.match(r'https://github.com/([^/]+)/([^/]+)', github_url)
    if not match:
        raise ValueError("Invalid GitHub repository URL")
    
    _, repo_name = match.groups()
    
    # Create temporary directory
    temp_dir = tempfile.mkdtemp(prefix='code_project_reader_')
    try:
        Repo.clone_from(github_url, temp_dir)
    except Exception as e:
        shutil.rmtree(temp_dir)
        raise RuntimeError(f"Failed to clone repository: {str(e)}")
    
    return os.path.join(temp_dir, repo_name)

def clean_temp_directories():
    temp_dirs = [d for d in os.listdir(tempfile.gettempdir()) if d.startswith('code_project_reader_')]
    for dir_name in temp_dirs:
        shutil.rmtree(os.path.join(tempfile.gettempdir(), dir_name))
```

Step 2: Modify reader.py to handle GitHub URLs
Complete code:

```python
import os
from urllib.parse import urlparse
from code_project_reader.utils import is_text_file, safe_read_file, clone_github_repository

from code_project_reader.tree_builder import build_tree

def generate_project_document(root_path: str) -> str:
    if not os.path.isdir(root_path):
        # Check if it's a GitHub URL
        parsed = urlparse(root_path)
        if parsed.scheme == 'https' and parsed.netloc == 'github.com':
            # Clone the repository to a temporary directory
            repo_path = clone_github_repository(root_path)
            root_path = os.path.join(repo_path, os.path.basename(parsed.path).rstrip('.git'))
        
        else:
            raise ValueError(f"Invalid input: {root_path}")
    
    project_name = os.path.basename(os.path.abspath(root_path))
    
    # Project Structure
    tree_lines = [project_name + "/"] + build_tree(root_path)
    tree_structure = "\n".join(tree_lines)
    
    # File Contents
    file_contents = []
    for dirpath, _, filenames in os.walk(root_path):
        for filename in filenames:
            full_path = os.path.join(dirpath, filename)
            if not is_text_file(full_path):
                continue
            rel_path = os.path.relpath(full_path, root_path)
            content = safe_read_file(full_path)
            if content is None:
                continue
            file_contents.append(
                f"File 1: {rel_path}\n---\n{content}\n---"
            )
    
    return (
        f"Project Name: {project_name}\n\n"
        f"Project Structure:\n{tree_structure}\n\n"
        f"File Contents:\n\n" + "\n\n".join(file_contents)
    )
```

Step 3: Modify main.py to handle GitHub URLs and add output file option
Complete code:

```python
from code_project_reader.reader import generate_project_document
import sys
from code_project_reader.utils import clean_temp_directories

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python main.py [-o <output_file>] [<project_root_path> | <github_url>]")
        print("\nExamples:")
        print("python main.py /path/to/local/project")
        print("python main.py https://github.com/user/repo")
        print("python main.py -o output.txt https://github.com/user/repo")
        sys.exit(1)
    
    output_file = None
    root_path = None
    
    if sys.argv[1] == '-o':
        if len(sys.argv) < 3:
            print("Error: Please provide an output file path")
            sys.exit(1)
        output_file = sys.argv[2]
        # Check if remaining arguments form a valid input
        if len(sys.argv) > 3:
            root_path = sys.argv[3]
        else:
            print("Error: Please provide the project path or GitHub URL after -o option")
            sys.exit(1)
    else:
        root_path = sys.argv[1]
    
    try:
        document = generate_project_document(root_path)
        
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(document)
            print(f"Project documentation saved to {output_file}")
        else:
            print(document)
    finally:
        # Clean up temporary directories
        clean_temp_directories()
```

Step 4: Update utils.py with new functions for GitHub handling
Complete code:

```python
import os
from git import Repo
import tempfile
import shutil
import re

TEXT_FILE_EXTENSIONS = {
    ".py", ".txt", ".md", ".json", ".yaml", ".yml", ".xml", ".html", ".css", ".js", ".csv"
}
TEXT_FILE_NAMES = {"Dockerfile", "Makefile", ".gitignore", "README", "README.md"}

def is_text_file(file_path):
    _, ext = os.path.splitext(file_path)
    filename = os.path.basename(file_path)
    return ext in TEXT_FILE_EXTENSIONS or filename in TEXT_FILE_NAMES

def safe_read_file(file_path):
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            return f.read()
    except (UnicodeDecodeError, PermissionError, IsADirectoryError):
        return None

def clone_github_repository(github_url: str) -> str:
    match = re.match(r'https://github.com/([^/]+)/([^/]+)', github_url)
    if not match:
        raise ValueError("Invalid GitHub repository URL")
    
    _, repo_name = match.groups()
    
    temp_dir = tempfile.mkdtemp(prefix='code_project_reader_')
    try:
        Repo.clone_from(github_url, temp_dir)
    except Exception as e:
        shutil.rmtree(temp_dir)
        raise RuntimeError(f"Failed to clone repository: {str(e)}")
    
    return os.path.join(temp_dir, repo_name)

def clean_temp_directories():
    temp_dirs = [d for d in os.listdir(tempfile.gettempdir()) if d.startswith('code_project_reader_')]
    for dir_name in temp_dirs:
        shutil.rmtree(os.path.join(tempfile.gettempdir(), dir_name))
```

Step 5: Update tree_builder.py to handle large repositories
Complete code:

```python
import os

def build_tree(path, prefix=""):
    entries = []
    try:
        entries = sorted(
            [e for e in os.listdir(path) if not e.startswith(".") or e in (".gitignore",)],
            key=lambda x: (not os.path.isdir(os.path.join(path, x)), x.lower())
        )
    except PermissionError:
        return []
    
    lines = []
    for idx, entry in enumerate(entries):
        full_path = os.path.join(path, entry)
        connector = "└── " if idx == len(entries) - 1 else "├── "
        lines.append(prefix + connector + entry)
        
        if os.path.isdir(full_path):
            extension = "    " if idx == len(entries) - 1 else "│   "
            
            # Add recursion control to handle large repositories
            try:
                sub_tree = build_tree(full_path, prefix + extension)
                lines.extend(sub_tree)
            except RuntimeError as e:
                if 'maximum recursion depth exceeded' in str(e):
                    lines.append(f"{prefix}{extension}... (Recursion limit reached)")
    
    return lines
```