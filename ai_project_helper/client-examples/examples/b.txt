Write a **Medical Institution and Doctor Management System**  
Requirements: Output the implementation steps sequentially, with each step strictly following the "Output Format". Do not add any explanatory text.

### 1. Output Format

Clearly indicate the step number, e.g.: Step 1.

Specify the Action, which must be one of: execute shell command, create/delete folder, file operation (create, update, delete). E.g.: Update file.

Specify the file path (except for shell commands), e.g.: /aiWorkDir/src/main.py

Provide the complete bash command or the full code of the relevant file.

### 1.1 Purpose  
The system primarily supports CRUD operations for medical institutions (hospitals, departments, divisions) and doctor information, while managing doctors' affiliated work institutions (departments) and editing/displaying institutional hierarchy relationships. The documentation is based on use case designs exported from Enterprise Architect (XML format) and references HL7 FHIR standards regarding Organization and Partitioning requirements.

### 1.2 Scope  

The system mainly includes the following modules:  

- **Doctor Affiliation Management Module**  
  Manages the selection and maintenance of doctors' affiliated institutions or departments (Use Case: WorkingOrganizationMange).  
- **Medical Institution Information Management Module**  
  Handles CRUD operations for hospitals, departments, and divisions (Use Case: OrgInfoManage).  
- **Institutional Hierarchy Management Module**  
  Supports drag-and-drop editing of hierarchical relationships between institutions via a graphical interface (Use Case: OrgHierarchyManage).  
- **Doctor Information Management Module**  
  Manages basic and detailed doctor information (Use Case: DoctorInformationManage).  
- **Institution List Display and Search Module**  
  Displays lists of hospital campuses, departments, or divisions and supports fuzzy search (Use Case: OrganizationList).  

The system primarily targets system administrators, doctor management operators, and institution management operators. It must be compatible with HL7 FHIR standards for easy integration with other healthcare information systems.  

### 1.3 Definitions, Acronyms, and Terms  

- **HL7**: Health Level Seven, a standard for healthcare data exchange.  
- **FHIR**: Fast Healthcare Interoperability Resources.  
- **Organization Resource**: Data structure in HL7 FHIR describing mandatory attributes of medical institutions.  
- **Partitioning Resource** (doctor information reference): Relevant standards describing doctor information data structures.  
- **Actor**: Roles in the system, e.g., SystemAdmin, DoctorModule, OrganizationModule.  
- **Use Case**: Scenario-based models describing system functionalities.  

### 1.4 References  

- HL7 FHIR official standards documentation  
- Enterprise Architect use case model export file (XML format)  
- Healthcare industry information security and data protection standards  

------  

## 2. General Description  

### 2.1 Product Perspective  

As a subsystem of the hospital information management system, this system is primarily responsible for the input, maintenance, and display of doctor and institution information. It adopts a modular design internally, with modules communicating via standard interfaces (e.g., RESTful APIs) to ensure consistency and interoperability with HL7 FHIR data formats while meeting response speed requirements in high-concurrency, big-data environments.  

### 2.2 Product Function Overview  

- **Doctor Affiliation Management**  
  Allows doctors or authorized operators to manage doctors' affiliated institutions, supporting selection of one or multiple institutions and calling the institution list interface for selection.  
- **Medical Institution Information Management**  
  Implements CRUD operations for hospitals, departments, and divisions. Data fields reference HL7 FHIR's Organization resource definitions.  
- **Institutional Hierarchy Management**  
  Supports drag-and-drop editing of hierarchical relationships between existing institutions via a single interface for intuitive display and adjustment.  
- **Doctor Information Management**  
  Provides CRUD functionalities for doctor information, with detailed fields designed according to HL7 FHIR's Partitioning resource requirements.  
- **Institution List Display and Search**  
  Displays lists of hospital campuses, departments, or divisions and supports keyword-based fuzzy search for easy selection during doctor information input.  

### 2.3 User Characteristics  

- **System Administrator (SystemAdmin)**  
  Responsible for system configuration, data maintenance, permission management, and security monitoring, with administrative access to all modules.  
- **Doctor Management User (DoctorModule)**  
  Handles input, editing, and maintenance of doctor information and affiliations.  
- **Institution Management User (OrganizationModule)**  
  Manages medical institution data, edits institutional hierarchies, and maintains institution list displays.  

### 2.4 Constraints  

- The system must comply with HL7 FHIR data format standards.  
- The frontend must adopt responsive design for desktop and mobile access.  
- The database must support many-to-many doctor-institution relationships and high-concurrency access.  
- Data security and user access control must meet healthcare information security standards.  

### 2.5 Assumptions and Dependencies  

- System development relies on HL7 FHIR standards; future revisions may require data structure adjustments.  
- Modules exchange data via standardized RESTful APIs.  
- The data storage system must ensure data consistency and transaction atomicity.  

------  

## 3. Detailed Requirements  

### 3.1 Functional Requirements  

#### 3.1.1 Doctor Affiliation Management (WorkingOrganizationMange)  

- **Description**  
  Manages doctors' affiliated institutions or departments. Doctors can select one or multiple institutions, which are then linked to their basic information.  
- **Inputs**  
  - Logged-in doctor's identity information  
  - Institution data returned by the OrganizationList interface  
- **Process Flow**  
  1. After login, the doctor accesses the "Doctor Affiliation Management" interface.  
  2. The system calls the OrganizationList interface to display candidate institutions.  
  3. The doctor selects one or multiple institutions.  
  4. The system saves the updated affiliation information and returns the operation result.  
- **Output**  
  Updated doctor-institution relationship data stored in the database.  
- **Preconditions**  
  The doctor or authorized user has logged in successfully, and institution list data loads normally.  
- **Postconditions**  
  Updated doctor information is synchronized with institution data for future queries and displays.  
- **Exception Handling**  
  If the candidate institution list is empty or fails to load, the system displays an error message and provides a reload option.  

------  

#### 3.1.2 Medical Institution Information Management (OrgInfoManage)  

- **Description**  
  Provides CRUD functionalities for hospitals, departments, and divisions.  
- **Inputs**  
  - Basic institution information (name, address, contact details, etc.)  
  - Mandatory fields from HL7 FHIR's Organization resource  
- **Process Flow**  
  1. The user accesses the "Institution Information Management" page.  
  2. The user performs add, edit, or delete operations.  
  3. The system validates data format and completeness.  
  4. Upon successful update, the system displays a confirmation and refreshes the list.  
- **Output**  
  Updated medical institution information, reflected in the list display.  

------  

#### 3.1.3 Institutional Hierarchy Management (OrgHierarchyManage)  

- **Description**  
  Allows users to edit hierarchical relationships between institutions via a single interface, supporting drag-and-drop adjustments.  
- **Inputs**  
  Existing institutional hierarchy data  
- **Process Flow**  
  1. The user accesses the "Institutional Hierarchy Management" page.  
  2. The user adjusts institution positions via drag-and-drop, with real-time feedback.  
  3. After confirmation, the system saves the new hierarchy.  
- **Output**  
  Updated institutional hierarchy, reflected in the system and future queries.  

------  

#### 3.1.4 Doctor Information Management (DoctorInformationManage)  

- **Description**  
  Provides CRUD functionalities for doctor information, including detailed fields.  
- **Inputs**  
  - Basic doctor information (name, ID, department, etc.)  
  - Detailed fields based on HL7 FHIR's Partitioning resource  
- **Process Flow**  
  1. The user accesses the "Doctor Information Management" page and views the doctor list.  
  2. The user selects a doctor to edit details.  
  3. After modifications, the user submits changes.  
  4. The system validates and saves the data, updating the list.  
- **Output**  
  Updated doctor information, reflected in the list.  
- **Extensions**  
  If a doctor's department changes, the system calls the "Doctor Affiliation Management" interface to synchronize updates.  

------  

#### 3.1.5 Hospital Institution List Display (OrganizationList)  

- **Description**  
  Displays a complete list of hospital campuses, departments, or divisions and supports fuzzy search.  
- **Inputs**  
  - Institution data from the database  
  - User-input keywords (e.g., partial institution names)  
- **Process Flow**  
  1. The user accesses the "Institution List" page.  
  2. The system loads and displays all institutions (fields per HL7 FHIR Organization resource).  
  3. The user inputs keywords for fuzzy search.  
  4. The system displays matching results.  
- **Output**  
  Search results displayed as a list; data is used for selecting institutions during doctor information input.  
- **Dependencies**  
  This module's data interface is called by "Doctor Affiliation Management" and "Doctor Information Management" for institution selection.  

------  

### 3.2 External Interface Requirements  

#### 3.2.1 User Interface  

- **Requirements**:  
  - All modules must provide intuitive, user-friendly web interfaces with responsive design for desktop and mobile devices.  
  - Clear layouts with comprehensive operation prompts and error feedback.  

#### 3.2.2 Data Interfaces  

- **Requirements**:  
  - Modules communicate via RESTful APIs supporting XML/JSON formats.  
  - Data structures must align with HL7 FHIR standards, especially Organization and Partitioning fields.  

#### 3.2.3 Third-Party and Security Interfaces  

- **Requirements**:  
  - The system must integrate with hospital authentication, audit logging, and other third-party healthcare systems.  
  - Interfaces must support SSL encryption, token validation, and user permission checks.  

------  

### 3.3 Non-Functional Requirements  

#### 3.3.1 Performance Requirements  

- Support high-concurrency access with response times under 2 seconds per request.  
- Ensure fast database queries/updates and stable performance as data grows.  

#### 3.3.2 Security Requirements  

- Authentication, permission control, encrypted data transmission, and logging must comply with healthcare security standards.  
- Encrypt all sensitive data and implement granular access control.  

#### 3.3.3 Usability Requirements  

- Friendly interfaces with clear workflows and comprehensive help documentation.  
- Target 99.9% annual availability with fault tolerance and quick recovery.  

#### 3.3.4 Maintainability Requirements  

- Modular design with well-documented code for easy future expansion.  
- Standardized interfaces for seamless integration with other systems.  

------  

## 4. Use Case Descriptions and Scenarios  

### 4.1 Actor Descriptions  

- **DoctorModule**: Manages doctor information input, editing, and affiliation maintenance.  
- **OrganizationModule**: Manages medical institution data, hierarchy editing, and list displays.  
- **SystemAdmin**: Handles system configuration, data maintenance, permissions, and security monitoring.  

### 4.2 Key Use Cases  

#### 4.2.1 Use Case: Doctor Affiliation Management (WorkingOrganizationMange)  

- **Summary**:  
  Allows doctors or authorized users to manage their affiliated institutions. Doctors select one or multiple institutions from a list.  
- **Actors**:  
  DoctorModule, OrganizationList interface  
- **Preconditions**:  
  The user is logged in, and institution list data loads successfully.  
- **Main Success Scenario**:  
  1. The user accesses the "Doctor Affiliation Management" interface.  
  2. The system calls OrganizationList to display candidate institutions.  
  3. The user selects institutions.  
  4. The system saves the selections and confirms success.  
- **Extensions**:  
  - If the list fails to load, display an error and offer a retry option.  
  - If no institutions are selected, prompt for confirmation before exit.  

------  

#### 4.2.2 Use Case: Medical Institution Information Management (OrgInfoManage)  

- **Summary**:  
  Supports CRUD operations for institution information per HL7 FHIR Organization standards.  
- **Actors**:  
  SystemAdmin, OrganizationModule  
- **Main Success Scenario**:  
  1. The user accesses the "Institution Information Management" page.  
  2. The user adds, edits, or deletes institution data.  
  3. The system validates and updates the data, refreshing the list.  

------  

#### 4.2.3 Use Case: Institutional Hierarchy Management (OrgHierarchyManage)  

- **Summary**:  
  Enables drag-and-drop editing of institutional hierarchies via a graphical interface.  
- **Actors**:  
  SystemAdmin, OrganizationModule  
- **Main Success Scenario**:  
  1. The user accesses the "Institutional Hierarchy Management" page.  
  2. The system displays the current hierarchy graphically.  
  3. The user adjusts positions via drag-and-drop.  
  4. The system saves the updated hierarchy upon confirmation.  

------  

#### 4.2.4 Use Case: Doctor Information Management (DoctorInformationManage)  

- **Summary**:  
  Manages comprehensive doctor information per HL7 FHIR Partitioning standards.  
- **Actors**:  
  SystemAdmin, DoctorModule  
- **Main Success Scenario**:  
  1. The user accesses the "Doctor Information Management" page.  
  2. The user edits a doctor's details and submits changes.  
  3. The system validates and saves the data, updating the list.  
- **Extensions**:  
  If a doctor's affiliation changes, sync updates via the "Doctor Affiliation Management" interface.  

------  

#### 4.2.5 Use Case: Hospital Institution List Display (OrganizationList)  

- **Summary**:  
  Displays a searchable list of institutions for selection.  
- **Actors**:  
  DoctorModule, OrganizationModule  
- **Main Success Scenario**:  
  1. The user accesses the "Institution List" page.  
  2. The system displays all institutions.  
  3. The user searches via keywords.  
  4. The system shows matching results for selection.  
- **Extensions**:  
  If no matches are found, display a "No results" message and suggest rechecking keywords.  

------  

## 5. System Design Considerations  

### 5.1 Database Design  

- Support many-to-many doctor-institution relationships.  
- Institution table fields must align with HL7 FHIR Organization resources.  
- Ensure data consistency and transaction atomicity under high concurrency.  

### 5.2 Interface Design  

- Use RESTful APIs for inter-module communication (XML/JSON).  
- Include detailed parameter descriptions, error handling, and return codes.  
- Maintain compatibility with HL7 FHIR standards for future expansion.  

### 5.3 Frontend Design  

- Responsive UI for optimal desktop/mobile user experience.  
- Streamlined workflows with clear prompts and feedback.  

------  

## 6. Quality and User Experience Requirements  

- **Reliability**: Stable operation under high concurrency with backup/recovery mechanisms.  
- **Scalability**: Modular design for easy upgrades and new features.  
- **Security**: Compliance with healthcare data security standards (authentication, encryption, auditing).  
- **User Experience**: Intuitive interfaces, fast responses, and accessible help resources.  

------  

## 7. Project Timeline and Future Plans  

### 7.1 Development Plan  

- Phased implementation: Start with basic CRUD, then add hierarchy, search, and drag-and-drop features.  
- Each phase requires unit, integration, and system testing before deployment.  

### 7.2 Testing Plan  

- Functional, performance, interface, and security testing for all modules.  
- Detailed test cases to validate workflows and edge cases.  

### 7.3 Deployment Plan  

- Distributed deployment with load balancing and high availability.  
- Gradual production rollout after internal acceptance.  

------  

## 8. Appendices  

### 8.1 References  

- HL7 FHIR official documentation  
- Enterprise Architect use case models (XML format)  
- Healthcare information security and data transmission standards  

### 8.2 Acronyms and Terms  

- **HL7**: Health Level Seven  
- **FHIR**: Fast Healthcare Interoperability Resources  
- **RESTful API**: Web-based software architecture interface  

### 8.3 Glossary  

- **Institutional Hierarchy**: Describes subordinate relationships between hospitals, departments, etc.  
- **Fuzzy Search**: Matches records based on partial keywords for quick navigation.  

---